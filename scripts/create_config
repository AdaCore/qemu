#!/bin/sh

echo "/* Automatically generated by create_config - do not modify */"

relative_to_path() {
  if test -z "$PYTHON"; then
    echo "FATAL: PYTHON not set yet"
    exit 1
  fi
  ${PYTHON} -c '
import os.path
relpaths = []
for path in "'"$2"'".split(":"):
    relpaths.append(os.path.relpath(path, "'"$1"'"))
print(":".join(relpaths))
'
}

relative_to_bindir() {
  if test -z "$bindir"; then
    echo "FATAL: bindir not set yet"
    exit 1
  fi
  relative_to_path "$bindir" "$1"
}



while read line; do

case $line in
 VERSION=*) # configuration
    version=${line#*=}
    major=$(echo "$version" | cut -d. -f1)
    minor=$(echo "$version" | cut -d. -f2)
    micro=$(echo "$version" | cut -d. -f3)
    echo "#define QEMU_VERSION \"$version\""
    echo "#define QEMU_VERSION_MAJOR $major"
    echo "#define QEMU_VERSION_MINOR $minor"
    echo "#define QEMU_VERSION_MICRO $micro"
    ;;
 qemu_*dir=* | qemu_*path=*) # qemu-specific directory configuration
    name=${line%=*}
    value=${line#*=}
    define_name=$(echo $name | LC_ALL=C tr '[a-z]' '[A-Z]')
    eval "define_value=\"$value\""
    echo "#define CONFIG_${define_name}_BIN_RELATIVE \"$(relative_to_bindir "$define_value")\""
    echo "#ifndef CONFIG_RELOCATABLE_INSTALL"
    echo "#define CONFIG_$define_name \"$define_value\""
    echo "#else"
    echo "#define CONFIG_$define_name qemu_exe_relative_path(CONFIG_${define_name}_BIN_RELATIVE)"
    echo "#endif /* CONFIG_RELOCATABLE_INSTALL */"
    # save for the next definitions
    eval "$name=\$define_value"
    ;;
 prefix=*)
    # save for the next definitions
    prefix=${line#*=}
    ;;
 bindir=*)
    # save for the next definitions (expand relative to $prefix)
    value=${line#*=}
    eval "bindir=\"$value\""
    echo "#define CONFIG_BINDIR_RAW \"$value\""
    echo "#define CONFIG_BINDIR_EXPANDED \"$bindir\""
    echo "#define CONFIG_BINDIR_PREFIX_RELATIVE \"$(relative_to_path "$prefix" "$bindir")\""
    ;;
 PYTHON=*) # python executable, needed by relative_to_bindir helper
    PYTHON=${line#*=}
    ;;
 IASL=*) # iasl executable
    value=${line#*=}
    echo "#define CONFIG_IASL $value"
    ;;
 CONFIG_AUDIO_DRIVERS=*)
    drivers=${line#*=}
    echo "#define CONFIG_AUDIO_DRIVERS \\"
    for drv in $drivers; do
      echo "    \"${drv}\",\\"
    done
    echo ""
    ;;
 CONFIG_BDRV_RW_WHITELIST=*)
    echo "#define CONFIG_BDRV_RW_WHITELIST\\"
    for drv in ${line#*=}; do
      echo "    \"${drv}\",\\"
    done
    echo "    NULL"
    ;;
 CONFIG_BDRV_RO_WHITELIST=*)
    echo "#define CONFIG_BDRV_RO_WHITELIST\\"
    for drv in ${line#*=}; do
      echo "    \"${drv}\",\\"
    done
    echo "    NULL"
    ;;
 CONFIG_*=y) # configuration
    name=${line%=*}
    echo "#define $name 1"
    ;;
 CONFIG_*=n) # configuration
    ;;
 CONFIG_*=*) # configuration
    name=${line%=*}
    value=${line#*=}
    echo "#define $name $value"
    ;;
 HAVE_*=y) # configuration
    name=${line%=*}
    echo "#define $name 1"
    ;;
 HAVE_*=*) # configuration
    name=${line%=*}
    value=${line#*=}
    echo "#define $name $value"
    ;;
 ARCH=*) # configuration
    arch=${line#*=}
    arch_name=$(echo $arch | LC_ALL=C tr '[a-z]' '[A-Z]')
    echo "#define HOST_$arch_name 1"
    ;;
 HOST_USB=*)
    # do nothing
    ;;
 HOST_CC=*)
    # do nothing
    ;;
 HOST_*=y) # configuration
    name=${line%=*}
    echo "#define $name 1"
    ;;
 HOST_*=*) # configuration
    name=${line%=*}
    value=${line#*=}
    echo "#define $name $value"
    ;;
 TARGET_BASE_ARCH=*) # configuration
    target_base_arch=${line#*=}
    base_arch_name=$(echo $target_base_arch | LC_ALL=C tr '[a-z]' '[A-Z]')
    echo "#define TARGET_$base_arch_name 1"
    ;;
 TARGET_XML_FILES=*)
    # do nothing
    ;;
 TARGET_ABI_DIR=*)
    # do nothing
    ;;
 TARGET_NAME=*)
    target_name=${line#*=}
    echo "#define TARGET_NAME \"$target_name\""
    ;;
 TARGET_DIRS=*)
    # do nothing
    ;;
 TARGET_*=y) # configuration
    name=${line%=*}
    echo "#define $name 1"
    ;;
 TARGET_*=*) # configuration
    name=${line%=*}
    value=${line#*=}
    echo "#define $name $value"
    ;;
 DSOSUF=*)
    echo "#define HOST_DSOSUF \"${line#*=}\""
    ;;
esac

done # read
